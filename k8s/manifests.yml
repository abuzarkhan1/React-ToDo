# Complete Fixed Kubernetes Manifest for HRMS Application
# Apply with: kubectl apply -f hrms-fixed.yaml

# namespace.yaml
apiVersion: v1
kind: Namespace
metadata:
  name: hrms
---
# mysql-configmap.yaml
apiVersion: v1
kind: ConfigMap
metadata:
  name: mysql-config
  namespace: hrms
data:
  MYSQL_DATABASE: "Project_fyp"
  MYSQL_USER: "hrms"
---
# mysql-secret.yaml
apiVersion: v1
kind: Secret
metadata:
  name: mysql-secret
  namespace: hrms
type: Opaque
data:
  MYSQL_ROOT_PASSWORD: YWRtaW4=  # base64 encoded "admin"
  MYSQL_PASSWORD: YWRtaW4=      # base64 encoded "admin"
---
# mysql-pvc.yaml - Fixed with storage class
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: mysql-pvc
  namespace: hrms
spec:
  accessModes:
    - ReadWriteOnce
  storageClassName: gp2  # Added EKS default storage class
  resources:
    requests:
      storage: 10Gi
---
# mysql-deployment.yaml - Fixed with better health checks
apiVersion: apps/v1
kind: Deployment
metadata:
  name: mysql
  namespace: hrms
spec:
  replicas: 1
  selector:
    matchLabels:
      app: mysql
  template:
    metadata:
      labels:
        app: mysql
    spec:
      containers:
      - name: mysql
        image: mysql:8.0
        ports:
        - containerPort: 3306
        env:
        - name: MYSQL_ROOT_PASSWORD
          valueFrom:
            secretKeyRef:
              name: mysql-secret
              key: MYSQL_ROOT_PASSWORD
        - name: MYSQL_DATABASE
          valueFrom:
            configMapKeyRef:
              name: mysql-config
              key: MYSQL_DATABASE
        - name: MYSQL_USER
          valueFrom:
            configMapKeyRef:
              name: mysql-config
              key: MYSQL_USER
        - name: MYSQL_PASSWORD
          valueFrom:
            secretKeyRef:
              name: mysql-secret
              key: MYSQL_PASSWORD
        # Added for better MySQL initialization
        - name: MYSQL_ROOT_HOST
          value: "%"
        volumeMounts:
        - name: mysql-storage
          mountPath: /var/lib/mysql
        resources:
          requests:
            memory: "512Mi"
            cpu: "500m"
          limits:
            memory: "1Gi"
            cpu: "1000m"
        # Fixed health checks - remove password from commands for security
        livenessProbe:
          exec:
            command:
            - mysqladmin
            - ping
            - -h
            - localhost
            - -u
            - root
            - --password=$MYSQL_ROOT_PASSWORD
          initialDelaySeconds: 90  # Increased delay
          periodSeconds: 10
          timeoutSeconds: 5
          failureThreshold: 5
        readinessProbe:
          exec:
            command:
            - mysql
            - -h
            - localhost
            - -u
            - root
            - --password=$MYSQL_ROOT_PASSWORD
            - -e
            - "SELECT 1"
          initialDelaySeconds: 60  # Increased delay
          periodSeconds: 5
          timeoutSeconds: 3
          failureThreshold: 5
      volumes:
      - name: mysql-storage
        persistentVolumeClaim:
          claimName: mysql-pvc
---
# mysql-service.yaml (ClusterIP - internal only)
apiVersion: v1
kind: Service
metadata:
  name: mysql
  namespace: hrms
spec:
  selector:
    app: mysql
  ports:
  - port: 3306
    targetPort: 3306
  type: ClusterIP
---
# backend-configmap.yaml
apiVersion: v1
kind: ConfigMap
metadata:
  name: backend-config
  namespace: hrms
data:
  PORT: "5000"
  DBHOST: "mysql"
  DBUSER: "hrms"
  DBNAME: "Project_fyp"
  DBPORT: "3306"
  FRONTEND_URL: "PLACEHOLDER_FRONTEND_URL"
  CORS_ORIGIN: "PLACEHOLDER_FRONTEND_URL"
  SMTP_HOST: "smtp.gmail.com"
  SMTP_PORT: "587"
  SMTP_USER: "abuzarkhan1242@gmail.com"
  NODE_ENV: "production"
---
# backend-secret.yaml
apiVersion: v1
kind: Secret
metadata:
  name: backend-secret
  namespace: hrms
type: Opaque
data:
  DBPASSWORD: YWRtaW4=  # base64 encoded "admin"
  EMPLOYEE_ACCESS_TOKEN_SECRET: SktETFNKQUtGMzI0MzIkJCMjQEAhISEhRVJFRGRFZGQ=
  ADMIN_ACCESS_TOKEN_SECRET: MTIzIyQkKiVeQkFHQUdnYWJhZyomXik=
  MANAGER_ACCESS_TOKEN_SECRET: Z2hneWV5ZSMkJCQlXkJBR0FHZ2FiYWcqJl4p
  REFRESH_TOKEN_SECRET: SkRLTFNKQUtGMzIyMzQyMyNAJCQkQCMkQCMzNDIzNEE=
  ACCESS_TOKEN_SECRET: SktETFNKQUtGMzI0MzIkJCQjQEAhISEhRVJFRGRFZGQ=
  SMTP_PASS: cXFieSByc2VjIGhnd2ggcnhmcw==
---
# backend-deployment.yaml - Fixed wait-for-mysql logic
apiVersion: apps/v1
kind: Deployment
metadata:
  name: backend
  namespace: hrms
spec:
  replicas: 1
  selector:
    matchLabels:
      app: backend
  template:
    metadata:
      labels:
        app: backend
    spec:
      initContainers:
      - name: wait-for-mysql
        image: busybox:1.35
        command: ['sh', '-c']
        args:
          - |
            echo "Waiting for MySQL to be ready..."
            until nc -z mysql 3306; do
              echo "MySQL not ready, waiting..."
              sleep 5
            done
            echo "MySQL is ready! Waiting additional 30 seconds for full initialization..."
            sleep 30
            echo "Ready to start backend!"
      containers:
      - name: backend
        image: abuzarkhan1/fyp-backend:latest
        ports:
        - containerPort: 5000
        envFrom:
        - configMapRef:
            name: backend-config
        - secretRef:
            name: backend-secret
        env:
        - name: NODE_ENV
          value: "production"
        resources:
          requests:
            memory: "256Mi"
            cpu: "200m"
          limits:
            memory: "512Mi"
            cpu: "500m"
        livenessProbe:
          httpGet:
            path: /
            port: 5000
          initialDelaySeconds: 120  # Increased delay
          periodSeconds: 10
          timeoutSeconds: 5
          failureThreshold: 5
        readinessProbe:
          httpGet:
            path: /
            port: 5000
          initialDelaySeconds: 60   # Increased delay
          periodSeconds: 5
          timeoutSeconds: 3
          failureThreshold: 5
---
# backend-service.yaml (ClusterIP)
apiVersion: v1
kind: Service
metadata:
  name: backend
  namespace: hrms
spec:
  selector:
    app: backend
  ports:
  - port: 5000
    targetPort: 5000
  type: ClusterIP
---
# backend-loadbalancer.yaml
apiVersion: v1
kind: Service
metadata:
  name: backend-lb
  namespace: hrms
  annotations:
    service.beta.kubernetes.io/aws-load-balancer-type: "nlb"
    service.beta.kubernetes.io/aws-load-balancer-scheme: "internet-facing"
spec:
  selector:
    app: backend
  ports:
  - port: 80
    targetPort: 5000
    protocol: TCP
  type: LoadBalancer
---
# flask-configmap.yaml
apiVersion: v1
kind: ConfigMap
metadata:
  name: flask-config
  namespace: hrms
data:
  PORT: "3000"
  FLASK_ENV: "production"
  PYTHONUNBUFFERED: "1"
---
# flask-deployment.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: flask-screening
  namespace: hrms
spec:
  replicas: 1
  selector:
    matchLabels:
      app: flask-screening
  template:
    metadata:
      labels:
        app: flask-screening
    spec:
      containers:
      - name: flask-screening
        image: abuzarkhan1/fyp-model:latest
        ports:
        - containerPort: 3000
        envFrom:
        - configMapRef:
            name: flask-config
        env:
        - name: FLASK_RUN_HOST
          value: "0.0.0.0"
        - name: FLASK_RUN_PORT
          value: "3000"
        resources:
          requests:
            memory: "512Mi"
            cpu: "300m"
          limits:
            memory: "2Gi"
            cpu: "1000m"
        livenessProbe:
          httpGet:
            path: /
            port: 3000
          initialDelaySeconds: 120
          periodSeconds: 30
          timeoutSeconds: 10
          failureThreshold: 3
        readinessProbe:
          httpGet:
            path: /
            port: 3000
          initialDelaySeconds: 60
          periodSeconds: 10
          timeoutSeconds: 5
          failureThreshold: 5
---
# flask-service.yaml (ClusterIP)
apiVersion: v1
kind: Service
metadata:
  name: flask-screening
  namespace: hrms
spec:
  selector:
    app: flask-screening
  ports:
  - port: 3000
    targetPort: 3000
  type: ClusterIP
---
# flask-loadbalancer.yaml
apiVersion: v1
kind: Service
metadata:
  name: flask-lb
  namespace: hrms
  annotations:
    service.beta.kubernetes.io/aws-load-balancer-type: "nlb"
    service.beta.kubernetes.io/aws-load-balancer-scheme: "internet-facing"
spec:
  selector:
    app: flask-screening
  ports:
  - port: 80
    targetPort: 3000
    protocol: TCP
  type: LoadBalancer
---
# client-configmap.yaml
apiVersion: v1
kind: ConfigMap
metadata:
  name: client-config
  namespace: hrms
data:
  VITE_APP_BASE_URL: "PLACEHOLDER_BACKEND_URL"
  VITE_API_URL: "PLACEHOLDER_FLASK_URL"
  # Added Node.js environment for production
  NODE_ENV: "production"
---
# client-deployment.yaml - Fixed with proper startup command
apiVersion: apps/v1
kind: Deployment
metadata:
  name: client
  namespace: hrms
spec:
  replicas: 1
  selector:
    matchLabels:
      app: client
  template:
    metadata:
      labels:
        app: client
    spec:
      containers:
      - name: client
        image: abuzarkhan1/fyp-client:latest
        ports:
        - containerPort: 5173
        envFrom:
        - configMapRef:
            name: client-config
        # Added proper startup command
        command: ["npm"]
        args: ["run", "dev", "--", "--host", "0.0.0.0", "--port", "5173"]
        resources:
          requests:
            memory: "256Mi"  # Increased memory
            cpu: "100m"
          limits:
            memory: "512Mi"  # Increased memory
            cpu: "300m"
        # Added health checks for frontend
        livenessProbe:
          httpGet:
            path: /
            port: 5173
          initialDelaySeconds: 60
          periodSeconds: 10
          timeoutSeconds: 5
          failureThreshold: 3
        readinessProbe:
          httpGet:
            path: /
            port: 5173
          initialDelaySeconds: 30
          periodSeconds: 5
          timeoutSeconds: 3
          failureThreshold: 3
---
# client-service.yaml (ClusterIP)
apiVersion: v1
kind: Service
metadata:
  name: client
  namespace: hrms
spec:
  selector:
    app: client
  ports:
  - port: 5173
    targetPort: 5173
  type: ClusterIP
---
# client-loadbalancer.yaml
apiVersion: v1
kind: Service
metadata:
  name: client-lb
  namespace: hrms
  annotations:
    service.beta.kubernetes.io/aws-load-balancer-type: "nlb"
    service.beta.kubernetes.io/aws-load-balancer-scheme: "internet-facing"
spec:
  selector:
    app: client
  ports:
  - port: 80
    targetPort: 5173
    protocol: TCP
  type: LoadBalancer
